// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientPortal.Models;

#nullable disable

namespace PatientPortal.Migrations
{
    [DbContext(typeof(PatientPortalContext))]
    partial class PatientPortalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");

            modelBuilder.Entity("PatientPortal.Models.Donor", b =>
                {
                    b.Property<ulong>("DonorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("enum('A','B','AB','O')");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<ulong?>("FamilyPatientId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PastHistory")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("PatientRelation")
                        .IsRequired()
                        .HasColumnType("enum('father','mother','brother','sister','husband','wife','son','daughter','others')");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("enum('male','female','others')");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("DonorId");

                    b.HasIndex(new[] { "DonorId" }, "DonorId_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "FamilyPatientId" }, "FamilyPatient_idx");

                    b.ToTable("donor", (string)null);
                });

            modelBuilder.Entity("PatientPortal.Models.Patient", b =>
                {
                    b.Property<ulong>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("enum('A','B','AB','O')");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PastHistory")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<byte[]>("Reports")
                        .HasColumnType("blob");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("enum('male','female','others')");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("PatientId");

                    b.HasIndex(new[] { "PatientId" }, "PatientId_UNIQUE")
                        .IsUnique();

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("PatientPortal.Models.Swap", b =>
                {
                    b.Property<ulong>("SwapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("DonorId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("PatientId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("SwapId");

                    b.HasIndex(new[] { "DonorId" }, "DonorId_idx");

                    b.HasIndex(new[] { "PatientId" }, "PatientId_idx");

                    b.HasIndex(new[] { "SwapId" }, "SwapId_UNIQUE")
                        .IsUnique();

                    b.ToTable("swap", (string)null);
                });

            modelBuilder.Entity("PatientPortal.Models.Donor", b =>
                {
                    b.HasOne("PatientPortal.Models.Patient", "FamilyPatient")
                        .WithMany("Donors")
                        .HasForeignKey("FamilyPatientId")
                        .HasConstraintName("FamilyPatient");

                    b.Navigation("FamilyPatient");
                });

            modelBuilder.Entity("PatientPortal.Models.Swap", b =>
                {
                    b.HasOne("PatientPortal.Models.Donor", "Donor")
                        .WithMany("Swaps")
                        .HasForeignKey("DonorId")
                        .IsRequired()
                        .HasConstraintName("DonorId");

                    b.HasOne("PatientPortal.Models.Patient", "Patient")
                        .WithMany("Swaps")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("PatientId");

                    b.Navigation("Donor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientPortal.Models.Donor", b =>
                {
                    b.Navigation("Swaps");
                });

            modelBuilder.Entity("PatientPortal.Models.Patient", b =>
                {
                    b.Navigation("Donors");

                    b.Navigation("Swaps");
                });
#pragma warning restore 612, 618
        }
    }
}
